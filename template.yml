AWSTemplateFormatVersion: '2010-09-09'
Description: Frontend infrastructure for static site hosting


Parameters:
  ApplicationName:
    Type: String
    Description: The name of the application
  EnvironmentName:
    Type: String
    Description: The name of the environment
  HostedZoneName:
    Type: String
  DomainName:
    Type: String


Resources:
  SiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${ApplicationName}-${EnvironmentName}
      VersioningConfiguration:
        Status: Enabled
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred

  SiteDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        Comment: !Sub ${ApplicationName}-${EnvironmentName}
        HttpVersion: http2
        Aliases:
          - !Ref DomainName
        ViewerCertificate:
          AcmCertificateArn: !Sub '{{resolve:ssm:/acm/${HostedZoneName}/cert-arn}}'
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.2_2019
        DefaultRootObject: index.html
        Origins:
          - Id: !Ref SiteBucket
            DomainName: !Sub ${SiteBucket.RegionalDomainName}
            S3OriginConfig:
              OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${Oai}
        DefaultCacheBehavior:
          TargetOriginId: !Ref SiteBucket
          ViewerProtocolPolicy: redirect-to-https
          CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad # caching disabled
          FunctionAssociations:
            - FunctionARN: !GetAtt SiteRedirect.FunctionARN
              EventType: viewer-request
        Logging:
          Bucket: !GetAtt SiteLogBucket.DomainName

  SiteRedirect:
    Type: AWS::CloudFront::Function
    Properties:
      Name: !Sub ${ApplicationName}-${EnvironmentName}-redirect
      AutoPublish: true
      FunctionConfig:
        Runtime: cloudfront-js-1.0
        Comment: cloudfront redirect function
      FunctionCode: |
        function handler(event) {
          console.log(`Event: ${JSON.stringify(event)}`);
          var request = event.request;
          var uri = event.request.uri;
          if (uri.endsWith('/')) {
            // check whether the URI is missing a file name
            request.uri += 'index.html';
          } else if (!uri.includes('.')) {
            // check whether the URI is missing a file extension
            request.uri += '/index.html';
          }
          console.log(`Result: ${JSON.stringify(request)}`);
          return request;
        }

  SiteLogBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${ApplicationName}-${EnvironmentName}-cloudfront-logs
      VersioningConfiguration:
        Status: Enabled
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true

  SiteLogGroup:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Sub /${ApplicationName}/${EnvironmentName}/cloudfront-logs

  SiteLogForwarderRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ApplicationName}-${EnvironmentName}-cloudfront-log-forwarder
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: LogForwarder
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: AllowReadBucket
                Effect: Allow
                Action:
                  - s3:GetObject
                Resource: !Sub ${SiteLogBucket.Arn}/*
              - Sid: AllowLogToCloudWatchLogs
                Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${SiteLogGroup}:*
                  - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${SiteLogGroup}:log-stream:*
  SiteLogForwarder:
    Type: AWS::Lambda::Function
    Properties:
      Description: Forward cloudfront logs to CloudWatch Logs
      FunctionName: !Sub ${ApplicationName}-${EnvironmentName}-cloudfront-log-forwarder
      Runtime: nodejs18.x
      Role: !GetAtt SiteLogForwarderRole.Arn
      Environment:
        Variables:
          LOG_GROUP:
            Ref: SiteLogGroup
      Handler: index.handler
      Code:
        ZipFile: |
          const zlib = require('zlib');
          const { S3Client, GetObjectCommand } = require('@aws-sdk/client-s3');
          const { CloudWatchLogsClient, CreateLogStreamCommand, PutLogEventsCommand } = require('@aws-sdk/client-cloudwatch-logs');

          const logs = new CloudWatchLogsClient({});
          const s3 = new S3Client({});

          async function parseLogFile(buffer) {
            const result = await new Promise((resolve, reject) => {
              zlib.gunzip(buffer, (err, result) => {
                if (err) {
                  reject(err);
                }
                resolve(result.toString());
              });
            });
            const logEntries = result.split('\n')
              .filter((line) => !line.startsWith('#') && 0 < line.length)
              .map((line) => {
                const logFields = line.split('\t');
                const fieldNames = [
                  'date', 'time', 'x-edge-location', 'sc-bytes', 'c-ip', 'cs-method',
                  'cs(Host)', 'cs-uri-stem', 'sc-status', 'cs(Referer)',
                  'cs(User-Agent)', 'cs-uri-query', 'cs(Cookie)', 'x-edge-result-type',
                  'x-edge-request-id', 'x-host-header', 'cs-protocol', 'cs-bytes',
                  'time-taken', 'x-forwarded-for', 'ssl-protocol', 'ssl-cipher',
                  'x-edge-response-result-type', 'cs-protocol-version', 'fle-status',
                  'fle-encrypted-fields', 'c-port', 'time-to-first-byte',
                  'x-edge-detailed-result-type', 'sc-content-type', 'sc-content-len',
                  'sc-range-start', 'sc-range-end',
                ];
                const logObj = {};
                for (let i = 0; i < fieldNames.length; i++) {
                  logObj[fieldNames[i]] = decodeURI(logFields[i]) || null;
                }
                return logObj;
              });
            return logEntries;
          }

          async function flushBatch(logEntries, logStreamName) {
            const failures = [];
            const result = await logs.send(new PutLogEventsCommand({
              logGroupName: process.env.LOG_GROUP,
              logStreamName,
              logEvents: logEntries.map((logEntry) => ({
                message: JSON.stringify(logEntry),
                timestamp: new Date(`${logEntry.date} ${logEntry.time}`).getTime(),
              })),
            }));
            if (result.rejectedLogEventsInfo) {
              console.error(JSON.stringify({ message: 'Rejected log events', rejectedLogEventsInfo: result.rejectedLogEventsInfo }));
              failures.push(result.rejectedLogEventsInfo);
            }
            return failures;
          }

          async function forwardLogEntries(logEntries, logStreamName) {
            let failures = [];
            let batch = [];
            let batchByteSize = 0;
            for (const logEntry of logEntries) {
              const logEntryString = JSON.stringify(logEntry);
              const logEntryByteSize = Buffer.byteLength(logEntryString) + 26;
              if (1_048_576 < batchByteSize + logEntryByteSize) {
                failures = failures.concat(await flushBatch(batch, logStreamName));
                batch = [];
                batchByteSize = 0;
              }
              batch.push(logEntry);
              batchByteSize += logEntryByteSize;
            }
            failures = failures.concat(await flushBatch(batch, logStreamName));
            return failures;
          }

          exports.handler = async (event, context) => {
            console.log(JSON.stringify({ event }));
            const key = event?.detail?.object?.key;
            const bucket = event?.detail?.bucket?.name;
            let failures = [];
            if (!key || !bucket) {
              console.error(JSON.stringify({ message: 'Event does not contain s3 object key or bucket name', event }));
              failures.push(event);
            } else {
              await logs.send(new CreateLogStreamCommand({
                logGroupName: process.env.LOG_GROUP,
                logStreamName: key,
              })).catch((err) => {
                if (err.name !== 'ResourceAlreadyExistsException') throw err;
              });
              const response = await s3.send(new GetObjectCommand({
                Bucket: bucket,
                Key: key,
              }));
              const body = await response.Body.transformToByteArray();
              const logEntries = await parseLogFile(body);
              failures = failures.concat(await forwardLogEntries(logEntries, key));
            }
            if (failures.length === 0) {
              console.log(JSON.stringify({ message: 'Successfully processed event' }));
            } else {
              throw new Error(`Error processing event: ${JSON.stringify({ failures })}`);
            }
          };
  SiteLogForwarderLogs:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Sub /aws/lambda/${SiteLogForwarder}
  SftpBucketUploadTriggerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref SiteLogForwarder
      Principal: events.amazonaws.com
      SourceArn: !GetAtt SftpBucketUploadTrigger.Arn
  SftpBucketUploadTrigger:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub ${ApplicationName}-${EnvironmentName}-cloudfront-log-upload-trigger
      EventPattern:
        source:
          - aws.s3
        detail-type:
          - Object Created
        detail:
          bucket:
            name:
              - !Sub ${ApplicationName}-${EnvironmentName}-cloudfront-logs
      Targets:
        - Arn: !GetAtt SiteLogForwarder.Arn
          Id: SftpUploadFunctionSftpBucketUploadLambdaTarget

  Oai:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: OAI for Static S3 Website-Better AWS Service Availability

  SiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref SiteBucket
      PolicyDocument:
        Id: S3-OAI-Policy
        Statement:
          - Effect: Allow
            Principal:
              CanonicalUser: !Sub ${Oai.S3CanonicalUserId}
            Action: 's3:GetObject'
            Resource: !Sub ${SiteBucket.Arn}/*

  SiteDnsRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      Type: A
      AliasTarget:
        DNSName: !Sub ${SiteDistribution.DomainName}
        HostedZoneId: Z2FDTNDATAQYW2
      Name: !Ref DomainName
      HostedZoneName: !Sub ${HostedZoneName}.

  RumIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: !Sub ${ApplicationName}-${EnvironmentName}-rum
      AllowUnauthenticatedIdentities: true

  RumIdentityPoolRoleAttachment:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref RumIdentityPool
      Roles:
        unauthenticated: !GetAtt RumClientRole.Arn

  RumClientRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ApplicationName}-${EnvironmentName}-rum-client
      Description: Unauthenticated Role for AWS RUM Clients
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                cognito-identity.amazonaws.com:aud: !Ref RumIdentityPool
              ForAnyValue:StringLike:
                cognito-identity.amazonaws.com:amr: unauthenticated
      Policies:
        - PolicyName: AWSRumClientPut
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: rum:PutRumEvents
                Resource: !Sub arn:${AWS::Partition}:rum:${AWS::Region}:${AWS::AccountId}:appmonitor/${ApplicationName}-${EnvironmentName}-rum

  RumLogGroup:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Sub /${ApplicationName}/${EnvironmentName}/rum

  Rum:
    Type: AWS::RUM::AppMonitor
    Properties:
      Name: !Sub ${ApplicationName}-${EnvironmentName}-rum
      Domain: !Ref DomainName
      CwLogEnabled: True
      AppMonitorConfiguration:
        IdentityPoolId: !Ref RumIdentityPool
        GuestRoleArn: !GetAtt RumClientRole.Arn
        SessionSampleRate: 1.0
        AllowCookies: True
        EnableXRay: True
        Telemetries:
          - errors
          - performance
          - http
        FavoritePages:
          - /
          - /resume


Outputs:
  SiteBucketName:
    Description: Name of the S3 bucket that contains the site assets
    Value: !Ref SiteBucket

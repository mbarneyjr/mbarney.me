AWSTemplateFormatVersion: '2010-09-09'
Description: Frontend infrastructure for static site hosting


Parameters:
  ApplicationName:
    Type: String
    Description: The name of the application
  EnvironmentName:
    Type: String
    Description: The name of the environment
  HostedZoneName:
    Type: String
  DomainName:
    Type: String


Resources:
  SiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${ApplicationName}-${EnvironmentName}
      VersioningConfiguration:
        Status: Enabled
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred

  SiteDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        Comment: !Sub ${ApplicationName}-${EnvironmentName}
        HttpVersion: http2
        Aliases:
          - !Ref DomainName
        ViewerCertificate:
          AcmCertificateArn: !Sub '{{resolve:ssm:/acm/${HostedZoneName}/cert-arn}}'
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.2_2019
        DefaultRootObject: index.html
        Origins:
          - Id: !Ref SiteBucket
            DomainName: !Sub ${SiteBucket.RegionalDomainName}
            S3OriginConfig:
              OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${Oai}
        DefaultCacheBehavior:
          TargetOriginId: !Ref SiteBucket
          ViewerProtocolPolicy: redirect-to-https
          CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad # caching disabled
          FunctionAssociations:
            - FunctionARN: !GetAtt SiteRedirect.FunctionARN
              EventType: viewer-request

  SiteRedirect:
    Type: AWS::CloudFront::Function
    Properties:
      Name: !Sub ${ApplicationName}-${EnvironmentName}-redirect
      AutoPublish: true
      FunctionConfig:
        Runtime: cloudfront-js-1.0
        Comment: cloudfront redirect function
      FunctionCode: |
        function handler(event) {
          console.log(`Event: ${JSON.stringify(event)}`);
          var request = event.request;
          var uri = event.request.uri;
          if (uri.endsWith('/')) {
            // check whether the URI is missing a file name
            request.uri += 'index.html';
          } else if (!uri.includes('.')) {
            // check whether the URI is missing a file extension
            request.uri += '/index.html';
          }
          console.log(`Result: ${JSON.stringify(request)}`);
          return request;
        }

  Oai:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: OAI for Static S3 Website-Better AWS Service Availability

  SiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref SiteBucket
      PolicyDocument:
        Id: S3-OAI-Policy
        Statement:
          - Effect: Allow
            Principal:
              CanonicalUser: !Sub ${Oai.S3CanonicalUserId}
            Action: 's3:GetObject'
            Resource: !Sub ${SiteBucket.Arn}/*

  SiteDnsRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      Type: A
      AliasTarget:
        DNSName: !Sub ${SiteDistribution.DomainName}
        HostedZoneId: Z2FDTNDATAQYW2
      Name: !Ref DomainName
      HostedZoneName: !Sub ${HostedZoneName}.

  RumIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: !Sub ${ApplicationName}-${EnvironmentName}-rum
      AllowUnauthenticatedIdentities: true

  RumIdentityPoolRoleAttachment:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref RumIdentityPool
      Roles:
        unauthenticated: !GetAtt RumClientRole.Arn

  RumClientRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ApplicationName}-${EnvironmentName}-rum-client
      Description: Unauthenticated Role for AWS RUM Clients
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                cognito-identity.amazonaws.com:aud: !Ref RumIdentityPool
              ForAnyValue:StringLike:
                cognito-identity.amazonaws.com:amr: unauthenticated
      Policies:
        - PolicyName: AWSRumClientPut
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: rum:PutRumEvents
                Resource: !Sub arn:${AWS::Partition}:rum:${AWS::Region}:${AWS::AccountId}:appmonitor/${ApplicationName}-${EnvironmentName}-rum

  RumLogGroup:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Sub /${ApplicationName}/${EnvironmentName}/rum

  Rum:
    Type: AWS::RUM::AppMonitor
    Properties:
      Name: !Sub ${ApplicationName}-${EnvironmentName}-rum
      Domain: !Ref DomainName
      CwLogEnabled: True
      AppMonitorConfiguration:
        IdentityPoolId: !Ref RumIdentityPool
        GuestRoleArn: !GetAtt RumClientRole.Arn
        SessionSampleRate: 1.0
        AllowCookies: True
        EnableXRay: True
        Telemetries:
          - errors
          - performance
          - http
        FavoritePages:
          - /
          - /resume


Outputs:
  SiteBucketName:
    Description: Name of the S3 bucket that contains the site assets
    Value: !Ref SiteBucket
